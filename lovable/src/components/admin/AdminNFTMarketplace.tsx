import { useState, useEffect, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  ShoppingCart,
  Crown,
  Star,
  Gem,
  Shield,
  Sword,
  Zap,
  Upload,
  Settings,
  Eye,
  Trash2,
  Edit,
  Plus,
  Flame,
  DollarSign,
} from "lucide-react";
import { toast } from "sonner";
import { useSecureAdmin } from "@/hooks/useSecureAdmin";

interface GAiANFT {
  id: string;
  name: string;
  category: "armor" | "weapon" | "tool" | "landscape" | "enhancement";
  type: "attack" | "defense" | "utility" | "cosmetic";
  rarity: "Common" | "Rare" | "Epic" | "Legendary" | "Mythical";
  price: number;
  attackPower?: number;
  defenseBonus?: number;
  specialAbility: string;
  description: string;
  image: string;
  createdBy: "admin" | "system";
  forSale: boolean;
  burnRate: number;
  gameplayFeatures: string[];
  adminNotes: string;
}

export function AdminNFTMarketplace() {
  const { isAdmin } = useSecureAdmin();
  const [nfts, setNfts] = useState<GAiANFT[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [newNFT, setNewNFT] = useState<Partial<GAiANFT>>({});
  const [isCreating, setIsCreating] = useState(false);

  useEffect(() => {
    if (isAdmin) {
      loadAdminNFTs();
    }
  }, [isAdmin]);

  const loadAdminNFTs = () => {
    // Load NFTs from secure admin vault
    const adminNFTs: GAiANFT[] = [
      {
        id: "gaia-001",
        name: "Dragon Scale Armor Supreme",
        category: "armor",
        type: "defense",
        rarity: "Mythical",
        price: 2500,
        defenseBonus: 950,
        specialAbility: "Dragon Protection Aura",
        description: "Legendary armor crafted from ancient dragon scales with quantum enhancement",
        image: "/lovable-uploads/93093efd-1912-4361-987d-424e6cf8e1df.png",
        createdBy: "admin",
        forSale: true,
        burnRate: 45,
        gameplayFeatures: ["Fire Immunity", "Magic Resistance", "Regeneration"],
        adminNotes: "Premium tier - High demand expected",
      },
      {
        id: "gaia-002",
        name: "Neural Quantum Blade",
        category: "weapon",
        type: "attack",
        rarity: "Legendary",
        price: 1800,
        attackPower: 875,
        specialAbility: "Quantum Strike",
        description: "AI-enhanced blade that adapts to enemy weaknesses",
        image: "/lovable-uploads/2ab2dcf8-008f-4f94-9341-9b6fcb25cefb.png",
        createdBy: "system",
        forSale: true,
        burnRate: 35,
        gameplayFeatures: ["Adaptive Damage", "Critical Strike", "Energy Drain"],
        adminNotes: "Auto-generated by neural system",
      },
      {
        id: "gaia-003",
        name: "Harmony Builder Kit",
        category: "tool",
        type: "utility",
        rarity: "Epic",
        price: 950,
        specialAbility: "Landscape Modification",
        description: "Complete toolkit for environmental manipulation and world building",
        image: "/lovable-uploads/1087f396-900a-4e0b-be62-7b049d0294ff.png",
        createdBy: "admin",
        forSale: false,
        burnRate: 25,
        gameplayFeatures: ["Terrain Shaping", "Resource Generation", "Weather Control"],
        adminNotes: "Reserved for special events",
      },
      {
        id: "gaia-004",
        name: "Quantum Enhancement Core",
        category: "enhancement",
        type: "utility",
        rarity: "Mythical",
        price: 3500,
        specialAbility: "Reality Manipulation",
        description: "Ultimate enhancement device for game mechanics and player abilities",
        image: "/lovable-uploads/42ec85dc-42df-4958-96d8-7919a192f629.png",
        createdBy: "admin",
        forSale: true,
        burnRate: 50,
        gameplayFeatures: ["Ability Boost", "Time Manipulation", "Dimensional Access"],
        adminNotes: "Flagship product - Maximum security",
      },
    ];
    setNfts(adminNFTs);
  };

  const toggleSaleStatus = (nftId: string) => {
    setNfts((prev) =>
      prev.map((nft) => (nft.id === nftId ? { ...nft, forSale: !nft.forSale } : nft))
    );

    const nft = nfts.find((n) => n.id === nftId);
    toast.success("ðŸ”¥ NFT Sale Status Updated!", {
      description: `${nft?.name} ${nft?.forSale ? "removed from" : "added to"} marketplace`,
      duration: 3000,
    });
  };

  const createNewNFT = () => {
    if (!newNFT.name || !newNFT.category) {
      toast.error("Please fill in required fields");
      return;
    }

    const nft: GAiANFT = {
      id: `gaia-${Date.now()}`,
      name: newNFT.name || "",
      category: newNFT.category || "tool",
      type: newNFT.type || "utility",
      rarity: newNFT.rarity || "Common",
      price: newNFT.price || 100,
      attackPower: newNFT.attackPower,
      defenseBonus: newNFT.defenseBonus,
      specialAbility: newNFT.specialAbility || "Basic Enhancement",
      description: newNFT.description || "",
      image: "/lovable-uploads/1ed369eb-ecda-422a-af60-8f511aa9aa8e.png",
      createdBy: "admin",
      forSale: false,
      burnRate: newNFT.burnRate || 15,
      gameplayFeatures: [],
      adminNotes: newNFT.adminNotes || "",
    };

    setNfts((prev) => [nft, ...prev]);
    setNewNFT({});
    setIsCreating(false);

    toast.success("ðŸŽ® New GAiA NFT Created!", {
      description: `${nft.name} added to admin collection`,
      duration: 4000,
    });
  };

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case "Mythical":
        return "from-purple-600 to-pink-600";
      case "Legendary":
        return "from-yellow-600 to-orange-600";
      case "Epic":
        return "from-blue-600 to-cyan-600";
      case "Rare":
        return "from-green-600 to-emerald-600";
      default:
        return "from-gray-600 to-slate-600";
    }
  };

  const filteredNFTs = nfts.filter(
    (nft) => selectedCategory === "all" || nft.category === selectedCategory
  );

  if (!isAdmin) {
    return (
      <Card className="border-2 border-red-500/50">
        <CardContent className="p-8 text-center">
          <Shield className="h-16 w-16 text-red-400 mx-auto mb-4" />
          <h3 className="text-xl font-bold text-red-400">Admin Access Required</h3>
          <p className="text-muted-foreground">
            Only authenticated admins can access the NFT marketplace management
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Admin NFT Control Header */}
      <Card className="border-2 border-purple-500/50 bg-gradient-to-br from-purple-900/30 to-pink-900/30">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-purple-400">
            <Crown className="h-6 w-6" />
            ðŸ‘‘ GAiA ADMIN NFT MARKETPLACE - LANDSCAPE ATTACK PLATFORM
          </CardTitle>
          <p className="text-muted-foreground">
            Complete admin control over NFT creation, pricing, and marketplace management
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-center">
            <div className="p-3 rounded-lg bg-purple-900/30 border border-purple-500/20">
              <div className="text-xl font-bold text-purple-400">{nfts.length}</div>
              <div className="text-xs text-muted-foreground">Total NFTs</div>
            </div>
            <div className="p-3 rounded-lg bg-green-900/30 border border-green-500/20">
              <div className="text-xl font-bold text-green-400">
                {nfts.filter((n) => n.forSale).length}
              </div>
              <div className="text-xs text-muted-foreground">For Sale</div>
            </div>
            <div className="p-3 rounded-lg bg-blue-900/30 border border-blue-500/20">
              <div className="text-xl font-bold text-blue-400">
                {nfts.filter((n) => n.createdBy === "admin").length}
              </div>
              <div className="text-xs text-muted-foreground">Admin Created</div>
            </div>
            <div className="p-3 rounded-lg bg-orange-900/30 border border-orange-500/20">
              <div className="text-xl font-bold text-orange-400">
                {Math.round(nfts.reduce((sum, n) => sum + n.burnRate, 0) / nfts.length)}%
              </div>
              <div className="text-xs text-muted-foreground">Avg Burn Rate</div>
            </div>
            <div className="p-3 rounded-lg bg-yellow-900/30 border border-yellow-500/20">
              <div className="text-xl font-bold text-yellow-400">
                {nfts.reduce((sum, n) => sum + n.price, 0).toLocaleString()}
              </div>
              <div className="text-xs text-muted-foreground">Total Value</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Management Tabs */}
      <Tabs defaultValue="marketplace" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="marketplace">ðŸ›’ Marketplace</TabsTrigger>
          <TabsTrigger value="create">âž• Create NFT</TabsTrigger>
          <TabsTrigger value="inventory">ðŸ“¦ Inventory</TabsTrigger>
          <TabsTrigger value="analytics">ðŸ“Š Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="marketplace" className="space-y-4">
          {/* Category Filter */}
          <div className="flex gap-2 flex-wrap">
            {["all", "armor", "weapon", "tool", "landscape", "enhancement"].map((category) => (
              <Button
                key={category}
                onClick={() => setSelectedCategory(category)}
                variant={selectedCategory === category ? "default" : "outline"}
                size="sm"
              >
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </Button>
            ))}
          </div>

          {/* NFT Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredNFTs.map((nft) => (
              <Card
                key={nft.id}
                className={`border-2 bg-gradient-to-br ${getRarityColor(nft.rarity)}/20 hover:scale-105 transition-all`}
              >
                <CardContent className="p-4 space-y-4">
                  <div className="aspect-square bg-gradient-to-br from-purple-900/30 to-pink-900/30 rounded-lg overflow-hidden flex items-center justify-center">
                    <img src={nft.image} alt={nft.name} className="w-full h-full object-cover" />
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <h4 className="font-bold text-white">{nft.name}</h4>
                      <Badge
                        className={`bg-gradient-to-r ${getRarityColor(nft.rarity)} text-white`}
                      >
                        {nft.rarity}
                      </Badge>
                    </div>

                    <p className="text-sm text-muted-foreground">{nft.description}</p>

                    <div className="flex justify-between text-xs">
                      <span className="text-green-400">{nft.price} GAiA</span>
                      <span className="text-orange-400">{nft.burnRate}% burn</span>
                    </div>

                    {nft.gameplayFeatures.length > 0 && (
                      <div className="flex flex-wrap gap-1">
                        {nft.gameplayFeatures.slice(0, 2).map((feature) => (
                          <Badge key={feature} variant="outline" className="text-xs">
                            {feature}
                          </Badge>
                        ))}
                      </div>
                    )}

                    <div className="space-y-2">
                      <Button
                        onClick={() => toggleSaleStatus(nft.id)}
                        className={`w-full ${nft.forSale ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700"}`}
                        size="sm"
                      >
                        {nft.forSale ? (
                          <>
                            <Trash2 className="h-3 w-3 mr-1" />
                            Remove from Sale
                          </>
                        ) : (
                          <>
                            <DollarSign className="h-3 w-3 mr-1" />
                            Put on Sale
                          </>
                        )}
                      </Button>

                      {nft.forSale && (
                        <div className="text-xs text-center text-green-400">
                          âœ… Live on GAiA Marketplace
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="create" className="space-y-4">
          <Card className="border-green-500/30">
            <CardHeader>
              <CardTitle className="text-green-400">Create New GAiA NFT</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium">Name *</label>
                  <Input
                    value={newNFT.name || ""}
                    onChange={(e) => setNewNFT((prev) => ({ ...prev, name: e.target.value }))}
                    placeholder="Enter NFT name"
                  />
                </div>

                <div>
                  <label className="text-sm font-medium">Category *</label>
                  <select
                    value={newNFT.category || ""}
                    onChange={(e) =>
                      setNewNFT((prev) => ({
                        ...prev,
                        category: e.target.value as CategoryType,
                      }))
                    }
                    className="w-full px-3 py-2 bg-muted border border-border rounded-md"
                  >
                    <option value="">Select category</option>
                    <option value="armor">Armor</option>
                    <option value="weapon">Weapon</option>
                    <option value="tool">Tool</option>
                    <option value="landscape">Landscape</option>
                    <option value="enhancement">Enhancement</option>
                  </select>
                </div>

                <div>
                  <label className="text-sm font-medium">Rarity</label>
                  <select
                    value={newNFT.rarity || "Common"}
                    onChange={(e) =>
                      setNewNFT((prev) => ({
                        ...prev,
                        rarity: e.target.value as NFTRarity,
                      }))
                    }
                    className="w-full px-3 py-2 bg-muted border border-border rounded-md"
                  >
                    <option value="Common">Common</option>
                    <option value="Rare">Rare</option>
                    <option value="Epic">Epic</option>
                    <option value="Legendary">Legendary</option>
                    <option value="Mythical">Mythical</option>
                  </select>
                </div>

                <div>
                  <label className="text-sm font-medium">Price (GAiA)</label>
                  <Input
                    type="number"
                    value={newNFT.price || ""}
                    onChange={(e) =>
                      setNewNFT((prev) => ({
                        ...prev,
                        price: Number(e.target.value)
                      }))
                    }
                    placeholder="Enter price"
                  />
                </div>
              </div>

              <div>
                <label className="text-sm font-medium">Description</label>
                <Input
                  value={newNFT.description || ""}
                  onChange={(e) =>
                    setNewNFT((prev) => ({
                      ...prev,
                      description: e.target.value,
                    }))
                  }
                  placeholder="Enter description"
                />
              </div>

              <div>
                <label className="text-sm font-medium">Special Ability</label>
                <Input
                  value={newNFT.specialAbility || ""}
                  onChange={(e) =>
                    setNewNFT((prev) => ({
                      ...prev,
                      specialAbility: e.target.value,
                    }))
                  }
                  placeholder="Enter special ability"
                />
              </div>

              <Button onClick={createNewNFT} className="w-full bg-green-600 hover:bg-green-700">
                <Plus className="h-4 w-4 mr-2" />
                Create GAiA NFT
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="inventory" className="space-y-4">
          <div className="text-center py-8">
            <Shield className="h-16 w-16 text-blue-400 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-blue-400">Admin Inventory Management</h3>
            <p className="text-muted-foreground">
              Complete overview of all NFT assets and their status
            </p>
          </div>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          <div className="text-center py-8">
            <Zap className="h-16 w-16 text-yellow-400 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-yellow-400">Sales Analytics & Performance</h3>
            <p className="text-muted-foreground">Track NFT performance and marketplace metrics</p>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
