name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      SKIP_LINT: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Clean install
        run: npm ci

      - name: Run pre-deployment checks
        run: npm run pre-deploy
        continue-on-error: true

      - name: Build application
        run: |
          if [ -z "$VITE_SUPABASE_URL" ]; then export VITE_SUPABASE_URL="https://placeholder.supabase.co"; fi
          if [ -z "$VITE_SUPABASE_ANON_KEY" ]; then export VITE_SUPABASE_ANON_KEY="placeholder-key"; fi
          npm run build

      - name: Verify build output
        run: |
          ls -la dist/
          echo "Build completed successfully!"
          echo "Build size: $(du -sh dist/ | cut -f1)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

  deploy-primary:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      deployment_result: ${{ steps.deploy_vercel.outcome }}
      platform_used: ${{ steps.set_platform.outputs.platform }}
      deployment_url: ${{ steps.deploy_vercel.outputs.url }}

    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Set platform
        id: set_platform
        run: echo "platform=vercel" >> $GITHUB_OUTPUT

      - name: Prepare Vercel project
        run: |
          mkdir -p .vercel
          cat > .vercel/project.json <<EOF
          {
            "projectId": "${VERCEL_PROJECT_ID}",
            "orgId": "${VERCEL_ORG_ID}"
          }
          EOF
          npx vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Deploy to Vercel (Primary)
        id: deploy_vercel
        continue-on-error: true
        run: |
          echo "üöÄ Deploying folder 'dist' to Vercel (production)..."
          DEPLOYMENT_URL="$(npx vercel deploy dist --prod --yes --token "$VERCEL_TOKEN" | tail -n 1)"
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Vercel deployment attempted, URL: $DEPLOYMENT_URL"

  deploy-fallback-netlify:
    needs: [build-and-test, deploy-primary]
    runs-on: ubuntu-latest
    if: needs.deploy-primary.outputs.deployment_result == 'failure'
    outputs:
      deployment_result: ${{ steps.deploy_netlify.outcome }}
      platform_used: netlify
      deployment_url: ${{ steps.deploy_netlify.outputs.url }}

    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      SKIP_LINT: true
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Notify fallback deployment
        run: echo "‚ö†Ô∏è Primary Vercel deployment failed, attempting Netlify fallback..."

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify (Fallback)
        id: deploy_netlify
        run: |
          URL=$(netlify deploy --dir=dist --prod --site "$NETLIFY_SITE_ID" --json | jq -r '.url // empty')
          echo "url=$URL" >> $GITHUB_OUTPUT

  deploy-fallback-github-pages:
    needs: [build-and-test, deploy-primary, deploy-fallback-netlify]
    runs-on: ubuntu-latest
    if: needs.deploy-primary.outputs.deployment_result == 'failure' && needs.deploy-fallback-netlify.outputs.deployment_result == 'failure'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      deployment_result: ${{ steps.deployment.outcome }}
      platform_used: github-pages
      deployment_url: ${{ steps.deployment.outputs.page_url }}

    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      SKIP_LINT: true

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Prepare GitHub Pages content
        run: |
          touch dist/.nojekyll

      - name: Notify final fallback deployment
        run: echo "‚ö†Ô∏è Both Vercel and Netlify deployments failed, attempting GitHub Pages fallback..."

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages (Final Fallback)
        id: deployment
        uses: actions/deploy-pages@v4

  notify-admin:
    needs: [deploy-primary, deploy-fallback-netlify, deploy-fallback-github-pages]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-primary.outputs.deployment_result == 'failure' && needs.deploy-primary.result != 'success')

    steps:
      - name: Determine deployment status
        id: status
        run: |
          VERCEL_STATUS="${{ needs.deploy-primary.outputs.deployment_result }}"
          NETLIFY_STATUS="${{ needs.deploy-fallback-netlify.result }}"
          GITHUB_PAGES_STATUS="${{ needs.deploy-fallback-github-pages.result }}"

          if [ "$VERCEL_STATUS" = "success" ]; then
            echo "platform=vercel" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
            echo "url=${{ needs.deploy-primary.outputs.deployment_url }}" >> $GITHUB_OUTPUT
          elif [ "$NETLIFY_STATUS" = "success" ]; then
            echo "platform=netlify" >> $GITHUB_OUTPUT
            echo "status=fallback" >> $GITHUB_OUTPUT
            echo "url=${{ needs.deploy-fallback-netlify.outputs.deployment_url }}" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_PAGES_STATUS" = "success" ]; then
            echo "platform=github-pages" >> $GITHUB_OUTPUT
            echo "status=fallback" >> $GITHUB_OUTPUT
            echo "url=${{ needs.deploy-fallback-github-pages.outputs.deployment_url }}" >> $GITHUB_OUTPUT
          else
            echo "platform=none" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "url=none" >> $GITHUB_OUTPUT
          fi

      - name: Send admin notification
        run: |
          STATUS="${{ steps.status.outputs.status }}"
          PLATFORM="${{ steps.status.outputs.platform }}"
          URL="${{ steps.status.outputs.url }}"

          echo "üö® DEPLOYMENT NOTIFICATION üö®"
          echo "================================"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Author: ${{ github.actor }}"
          echo "Time: $(date -u)"
          echo ""
          if [ "$STATUS" = "failed" ]; then
            echo "‚ùå ALL DEPLOYMENT PLATFORMS FAILED"
            echo "- Vercel (Primary): FAILED"
            echo "- Netlify (Fallback): FAILED"
            echo "- GitHub Pages (Final Fallback): FAILED"
            echo ""
            echo "üîß ACTION REQUIRED:"
            echo "1. Check repository secrets and tokens"
            echo "2. Verify platform configurations"
            echo "3. Review deployment logs for errors"
            echo "4. Consider manual deployment"
            exit 1
          elif [ "$STATUS" = "fallback" ]; then
            echo "‚ö†Ô∏è FALLBACK DEPLOYMENT SUCCESSFUL"
            echo "- Vercel (Primary): FAILED"
            echo "- $PLATFORM (Fallback): SUCCESS"
            echo "- Deployment URL: $URL"
            echo ""
            echo "üîç INVESTIGATION NEEDED:"
            echo "1. Check why Vercel deployment failed"
            echo "2. Verify Vercel tokens and configuration"
            echo "3. Monitor primary platform health"
            echo "4. Consider fixing Vercel issues for future deployments"
          fi

  deployment-summary:
    needs: [deploy-primary, deploy-fallback-netlify, deploy-fallback-github-pages]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate deployment summary
        run: |
          echo "üéØ DEPLOYMENT SUMMARY"
          echo "===================="
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Time: $(date -u)"
          echo ""
          VERCEL_STATUS="${{ needs.deploy-primary.outputs.deployment_result }}"
          NETLIFY_STATUS="${{ needs.deploy-fallback-netlify.result }}"
          GITHUB_PAGES_STATUS="${{ needs.deploy-fallback-github-pages.result }}"
          echo "üìä Platform Results:"
          echo "- Vercel (Primary): $VERCEL_STATUS"
          echo "- Netlify (Fallback): $NETLIFY_STATUS"
          echo "- GitHub Pages (Final): $GITHUB_PAGES_STATUS"
          echo ""
          if [ "$VERCEL_STATUS" = "success" ]; then
            echo "‚úÖ PRIMARY DEPLOYMENT SUCCESSFUL"
            echo "Platform: Vercel"
            echo "URL: ${{ needs.deploy-primary.outputs.deployment_url }}"
          elif [ "$NETLIFY_STATUS" = "success" ]; then
            echo "‚ö†Ô∏è FALLBACK DEPLOYMENT SUCCESSFUL"
            echo "Platform: Netlify"
            echo "URL: ${{ needs.deploy-fallback-netlify.outputs.deployment_url }}"
          elif [ "$GITHUB_PAGES_STATUS" = "success" ]; then
            echo "‚ö†Ô∏è FINAL FALLBACK DEPLOYMENT SUCCESSFUL"
            echo "Platform: GitHub Pages"
            echo "URL: ${{ needs.deploy-fallback-github-pages.outputs.deployment_url }}"
          else
            echo "‚ùå ALL DEPLOYMENT ATTEMPTS FAILED"
            echo ""
            echo "üîß Manual intervention required!"
            echo "Check logs and platform configurations."
          fi
          echo ""
          echo "üìã Next Steps:"
          echo "1. Verify application is accessible"
          echo "2. Run post-deployment health checks"
          echo "3. Monitor application performance"
          echo "4. Review any fallback notifications"
